from upemtk import *
from time import sleep
from random import randint 
# dimensions du jeu
taille_case = 15
largeur_plateau = 40  # en nombre de cases
hauteur_plateau = 30  # en nombre de cases

#Message de bienvenue 
print("Bienvenue dans l'arene du snake !")
print("Le serpent peux manger plusieurs pommes de couleurs mais attention les pommes ont des pouvoirs")
print("Appuyez sur une touche directionelles pour commencer le jeu pour le JOUEUR 1 en violet")
print("Appuyez sur une touche zqsd pour commencer le jeu pour le JOUEUR 2 en gris")
score=0
score2=0





def case_vers_pixel(case):
    """
	Fonction recevant les coordonnées d'une case du plateau sous la 
	forme d'un couple d'entiers (ligne, colonne) et renvoyant les 
	coordonnées du pixel se trouvant au centre de cette case. Ce calcul 
	prend en compte la taille de chaque case, donnée par la variable 
	globale taille_case.
    """
    i, j = case
    return (i + .5) * taille_case, (j + .5) * taille_case

def affiche_pommes(pomme):
        x, y = case_vers_pixel(pomme)  # à modifier !!!
        cercle(x, y, taille_case/2,
        couleur='darkred', remplissage='red')
        rectangle(x-2, y-taille_case*.4, x+2, y-taille_case*.7,)

def affiche_pommes2(pomme2):
        x, y = case_vers_pixel(pomme2)  # à modifier !!!
        cercle(x, y, taille_case/2,
        couleur='darkred', remplissage='yellow')
        rectangle(x-2, y-taille_case*.4, x+2, y-taille_case*.7,)
    
def affiche_pommes3(pomme3):
        x, y = case_vers_pixel(pomme3)  # à modifier !!!
        cercle(x, y, taille_case/2,
        couleur='darkred', remplissage='green')
        rectangle(x-2, y-taille_case*.4, x+2, y-taille_case*.7,)
        
def affiche_pommes4(pomme4):
        x, y = case_vers_pixel(pomme4)  # à modifier !!!
        cercle(x, y, taille_case/2,
        couleur='darkred', remplissage='teal')
        rectangle(x-2, y-taille_case*.4, x+2, y-taille_case*.7,)



        
        
def affiche_monstre(monstre):
    i = 0
    while i < len(monstre):
        x, y = case_vers_pixel(monstre[i])  # à modifier !!!
        cercle(x, y, taille_case/2 + 1,
            couleur='darkgreen', remplissage='grey')
        i += 1

def affiche_serpent(serpent):
    i = 0
    while i < len(serpent):
        x, y = case_vers_pixel(serpent[i])  # à modifier !!!
        cercle(x, y, taille_case/2 + 1,
            couleur='darkgreen', remplissage='purple')
        i += 1

def collision_pomme_serpent(serpent,pomme):    
    tete = serpent[0]
    return tete[0] == pomme[0] and tete[1] == pomme[1]
    
def collision_pomme2_serpent(serpent,pomme2):    
    tete = serpent[0]
    return tete[0] == pomme2[0] and tete[1] == pomme2[1]

def collision_mur(serpent):
    tete=serpent[0]
    return serpent
   

def deplace_serpent(serpent,direction):
    i=len(serpent)-1
    tete = serpent[0]
    serpent[0] = tete[0] + direction[0] , tete[1] + direction[1]
    while i > 0:
        serpent[i]= serpent[i-1]
        i = i - 1

def deplace_monstre(monstre,direction2):
    i=len(monstre)-1
    tete = monstre[0]
    monstre[0] = tete[0] + direction2[0] , tete[1] + direction2[1]
    while i > 0:
        monstre[i]= monstre[i-1]
        i = i - 1


def change_direction(direction, touche):
    # à compléter !!!
    if touche == 'Up':
        return (0,-1)
    if touche == 'Down':
        return (0,1)
    if touche =='Left':
        return(-1,0)
    if touche =='Right':
        return(1,0)
    else:
        # pas de changement !
        return direction
 
def change_direction2(direction2, touche2):
    # à compléter !!!
    if touche2 == 'z':
        return (0,-1)
    if touche2 == 's':
        return (0,1)
    if touche2 =='q':
        return(-1,0)
    if touche2 =='d':
        return(1,0)
    else:
        # pas de changement !
        return direction2
       
        
def test_serpent(serpent,pommes):
    tete=serpent[0]
    return tete[0] == pommes[0]and tete[1] == pommes[1]

def test2_serpent(serpent,pommes2):
    tete=serpent[0]
    return tete[0] == pommes2[0]and tete[1] == pommes2[1]



# programme principal
if __name__ == "__main__":

    # initialisation du jeu
    framerate = 10 # taux de rafraîchissement du jeu en images/s
    direction = (0,0)
    direction2=(0,0)
    serpent=[(3,2),(3,2)] # direction initiale du serpent
    pomme=(20,16)
    pomme2=(20,20)
    pomme3=(10,16)
    pomme4=(10,10)

    monstre=[(36,27),(35,27)]
    
    cree_fenetre(taille_case * largeur_plateau,taille_case * hauteur_plateau)

    # boucle principale
    while True:
        # affichage des objets
        efface_tout()
        affiche_pommes(pomme)
        affiche_pommes2(pomme2)# à modifier !
        affiche_pommes3(pomme3)
        affiche_pommes4(pomme4)
        affiche_serpent(serpent)# à modifier !
        affiche_monstre(monstre)
        ligne(12, 500,25, 5, couleur='purple', epaisseur=10, tag='')
        ligne(5, 20,600, 20, couleur='gray25', epaisseur=10, tag='')
        ligne(2, 430,800, 430, couleur='gray25', epaisseur=10, tag='')
        ligne(5, 14690,700, -2850, couleur='purple', epaisseur=10, tag='')
       
        



        mise_a_jour()

        # gestion des événements
        ev = donne_ev()
        ty = type_ev(ev)
        if ty == 'Quitte':
            break
        elif ty == 'Touche':
            print(touche(ev))
            direction = change_direction(direction, touche(ev))
            direction2 = change_direction2(direction2, touche(ev))
             #Condition pour manger la pomme
        if serpent[0][0] == pomme[0] and serpent[0][1] == pomme[1]:
            serpent.append(pomme)
            serpent.append(pomme2)
            serpent.append(pomme3)
            serpent.append(pomme4)
            
            score+=1
        
        if monstre[0][0]==pomme[0] and monstre[0][1]==pomme[1]:
            monstre.append(pomme)
            monstre.append(pomme2)
            monstre.append(pomme3)
            monstre.append(pomme4)
            score2+=1
        
            t=1
            #Affichage de ce que mange le serpent 
        if pomme == serpent[0]:
            serpent.append(pomme)
            print("le joueur a mange",t,"pomme rouge ")
            pomme = (randint(0,39), randint(0,29))
            framerate=10
            score+=1
            
        if pomme2==serpent[0]:
            serpent.append(pomme2)
            pomme2=(randint(0,20),randint(0,25))
            framerate = 30
            score+=1
            print("le joueur a mange une pomme jaune acceleration de +30")
            
        if pomme3==serpent[0]:
            serpent.append(pomme3)
            pomme3=(randint(0,26),randint(0,27))
            framerate = 10
            score+=1
            print("le joueur a mange une pomme jaune acceleration de +30")
            
        if pomme4==serpent[0]:
            serpent.append(pomme4)
            pomme4=(randint(0,21),randint(0,24))
            framerate = 10
            score+=1
            print("le joueur a mange une pomme jaune acceleration de +30")
            
        t=1
        
        
        if pomme == monstre[0]:
            pomme=(randint(0,20),randint(0,25))
            monstre.append(pomme)
            print("le joueur a mange",t,"pomme rouge ")
            framerate=10
            score2+=1
            
        if pomme2==monstre[0]:
            pomme2=(randint(0,20),randint(0,30))
            monstre.append(pomme2)


            framerate = 10
            print("le joueur a mange une pomme jaune acceleration de +30")
            score2+=1
        
        
        if pomme3==monstre[0]:
            pomme3=(randint(0,20),randint(0,30))
            monstre.append(pomme3)
            framerate = 10
            print("le joueur a mange une pomme jaune acceleration de +30")
            score2+=1
        
        if pomme4==monstre[0]:
            pomme4=(randint(0,22),randint(0,32))
            monstre.append(pomme4)
            framerate = 10
            print("le joueur a mange une pomme jaune acceleration de +30")
            score2+=1
    
        if serpent[0] in monstre:
            print("le joueur 2 a gagne !")
            print("le score du joueur 1 est de",score,"et celui du gagnant",score2)
            break 
            
        if monstre[0] in serpent:
            print("le joueur 1 a gagne !")
            print("le score du joueur 2 est de",score2,"et celui du gagnant",score)
            break    
        
        if monstre[0]==(0,30):
            print("le score du joueur 2 est de",score2)
            break
        
        if serpent[0]==(0,40):
            print("le score du joueur 1 est de",score)
            break 
        
        if monstre[0]==(40,30):
            print("le score du joueur 2 est de",score2)
            break
        
        if serpent[0]==(0,30):
            print("le score du joueur 1 est de",score)
            break
        
        if monstre[0]==(40,30):
            print("le score du joueur 2 est de",score2)
            break
        
        if serpent[0]==(0,40):
            print("le score du joueur 1 est de",score)
            break
        if serpent[0]==ligne:
            break
        
        deplace_serpent(serpent, direction)
        deplace_monstre(monstre,direction2)
    
        
        # attente avant rafraîchissement
        sleep(1/framerate)

    # fermeture et sortie
    ferme_fenetre()
